AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 3
Resources:
  CRCWebsite:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketName: mycrcbucket55
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
  MyS3AccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: mycrcbucket55
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource: arn:aws:s3:::mycrcbucket55/*
  MyDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z07002832LIROC6X6XETA
      RecordSets:
      - Name: ecejaresume.com
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: d1zxksoosong9n.cloudfront.net
  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: mycrcbucket55.s3-website-us-west-1.amazonaws.com
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:245843769871:certificate/83d7cf04-00ba-418c-a135-d9098f6e33de
          SslSupportMethod: sni-only
        Aliases:
        - ecejaresume.com
        Origins:
        - DomainName: mycrcbucket55.s3-website-us-west-1.amazonaws.com
          Id: mycrcbucket55.s3-website-us-west-1.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: match-viewer
        DefaultRootObject: index.html
        Enabled: true
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Website_Hits
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: hits
        AttributeType: S
      KeySchema:
      - AttributeName: hits
        KeyType: HASH
  CounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CounterFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Website_Hits
      Events:
        WebsiteCounter:
          Type: Api
          Properties:
            Path: /WebsiteCounter
            Method: get
    Metadata:
      SamResourceId: CounterFunction
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  CounterFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - CounterFunction
      - Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - CounterFunctionRole
      - Arn
